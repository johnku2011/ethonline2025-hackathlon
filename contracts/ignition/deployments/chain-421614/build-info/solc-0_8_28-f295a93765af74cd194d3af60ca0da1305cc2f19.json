{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f295a93765af74cd194d3af60ca0da1305cc2f19",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/MockERC20.sol": "project/contracts/MockERC20.sol",
    "contracts/MockMorphoVault.sol": "project/contracts/MockMorphoVault.sol",
    "contracts/MockPyUSD.sol": "project/contracts/MockPyUSD.sol",
    "contracts/PyUSDSubscription.sol": "project/contracts/PyUSDSubscription.sol",
    "contracts/SubscriptionManager.old.sol": "project/contracts/SubscriptionManager.old.sol",
    "contracts/SubscriptionManager.sol": "project/contracts/SubscriptionManager.sol",
    "contracts/interfaces/IMorphoVault.sol": "project/contracts/interfaces/IMorphoVault.sol",
    "contracts/libraries/SubscriptionLib.sol": "project/contracts/libraries/SubscriptionLib.sol",
    "contracts/mocks/MockMorphoVault.sol": "project/contracts/mocks/MockMorphoVault.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": ["ast"],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/interfaces/IMorphoVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title IMorphoVault\n * @notice Interface for Morpho Protocol vault integration\n * @dev Minimal interface for deposit/withdraw and share conversion\n */\ninterface IMorphoVault {\n    /**\n     * @notice Deposit assets into the vault\n     * @param assets Amount of assets to deposit\n     * @param receiver Address that will receive the shares\n     * @return shares Amount of shares minted\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @notice Withdraw assets from the vault\n     * @param assets Amount of assets to withdraw\n     * @param receiver Address that will receive the assets\n     * @param owner Address that owns the shares\n     * @return shares Amount of shares burned\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @notice Get the share balance of an account\n     * @param account Address to query\n     * @return balance Share balance\n     */\n    function balanceOf(address account) external view returns (uint256 balance);\n\n    /**\n     * @notice Convert shares to assets\n     * @param shares Amount of shares to convert\n     * @return assets Equivalent amount of assets\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @notice Get the underlying asset address\n     * @return assetAddress Address of the underlying asset token\n     */\n    function asset() external view returns (address assetAddress);\n}\n\n\n"
      },
      "project/contracts/libraries/SubscriptionLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title SubscriptionLib\n * @notice Library for subscription-related calculations and validations\n * @dev Pure functions for gas-efficient calculations, following OpenZeppelin library pattern\n */\nlibrary SubscriptionLib {\n    // ============ Constants ============\n    \n    uint256 internal constant SECONDS_IN_YEAR = 365 days;\n    uint256 internal constant APY_BASIS_POINTS = 450; // 4.5% APY\n    uint256 internal constant BASIS_POINTS = 10000;\n    uint256 internal constant MAX_PLATFORM_FEE = 1000; // 10% max\n    \n    // ============ Errors ============\n    \n    error InvalidPrice();\n    error InvalidName();\n    error InvalidPlatformFee();\n    error InvalidAddress();\n    error SelfSubscription();\n    \n    // ============ Fee Calculations ============\n    \n    /**\n     * @notice Calculate platform fee and provider amount\n     * @param principal Total amount paid\n     * @param feePercent Platform fee in basis points\n     * @return platformFee Fee amount for platform\n     * @return providerAmount Amount for provider (principal - fee)\n     */\n    function calculateFees(uint256 principal, uint256 feePercent) \n        internal \n        pure \n        returns (uint256 platformFee, uint256 providerAmount) \n    {\n        platformFee = (principal * feePercent) / BASIS_POINTS;\n        providerAmount = principal - platformFee;\n    }\n    \n    /**\n     * @notice Calculate projected interest based on 4.5% APY\n     * @param principal Principal amount\n     * @return projectedInterest Expected interest after 1 year\n     */\n    function calculateProjectedInterest(uint256 principal) \n        internal \n        pure \n        returns (uint256 projectedInterest) \n    {\n        projectedInterest = (principal * APY_BASIS_POINTS) / BASIS_POINTS;\n    }\n    \n    /**\n     * @notice Calculate actual interest earned\n     * @param currentValue Current value including yield\n     * @param principal Original principal\n     * @return interest Actual interest earned (0 if no profit)\n     */\n    function calculateActualInterest(uint256 currentValue, uint256 principal) \n        internal \n        pure \n        returns (uint256 interest) \n    {\n        interest = currentValue > principal ? currentValue - principal : 0;\n    }\n    \n    // ============ Time Calculations ============\n    \n    /**\n     * @notice Calculate subscription expiration time\n     * @param startTime Start timestamp\n     * @return expirationTime Expiration timestamp (1 year later)\n     */\n    function calculateExpiration(uint256 startTime) \n        internal \n        pure \n        returns (uint256 expirationTime) \n    {\n        expirationTime = startTime + SECONDS_IN_YEAR;\n    }\n    \n    /**\n     * @notice Check if subscription has expired\n     * @param expirationTime Expiration timestamp\n     * @return expired Whether subscription has expired\n     */\n    function isExpired(uint256 expirationTime) \n        internal \n        view \n        returns (bool expired) \n    {\n        expired = block.timestamp >= expirationTime;\n    }\n    \n    // ============ Validations ============\n    \n    /**\n     * @notice Validate plan creation parameters\n     * @param yearlyPrice Price per year\n     * @param name Plan name\n     * @param provider Provider address\n     */\n    function validatePlanParams(\n        uint256 yearlyPrice, \n        string memory name,\n        address provider\n    ) internal pure {\n        if (yearlyPrice == 0) revert InvalidPrice();\n        if (bytes(name).length == 0) revert InvalidName();\n        if (provider == address(0)) revert InvalidAddress();\n    }\n    \n    /**\n     * @notice Validate subscription parameters\n     * @param subscriber Subscriber address\n     * @param provider Provider address\n     */\n    function validateSubscriptionParams(\n        address subscriber,\n        address provider\n    ) internal pure {\n        if (provider == address(0)) revert InvalidAddress();\n        if (subscriber == provider) revert SelfSubscription();\n    }\n    \n    /**\n     * @notice Validate platform fee update\n     * @param newFeePercent New fee percentage in basis points\n     */\n    function validatePlatformFee(uint256 newFeePercent) internal pure {\n        if (newFeePercent > MAX_PLATFORM_FEE) revert InvalidPlatformFee();\n    }\n    \n    /**\n     * @notice Validate address is not zero\n     * @param addr Address to validate\n     */\n    function validateAddress(address addr) internal pure {\n        if (addr == address(0)) revert InvalidAddress();\n    }\n}\n\n\n"
      },
      "project/contracts/MockERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MockERC20\n * @notice Mock ERC20 token for testing purposes\n * @dev Supports custom decimals (e.g., 6 for PyUSD, 18 for most tokens)\n */\ncontract MockERC20 is ERC20 {\n    uint8 private immutable _decimals;\n\n    event Minted(address indexed to, uint256 amount);\n    event Burned(address indexed from, uint256 amount);\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        require(decimals_ > 0 && decimals_ <= 18, \"Invalid decimals\");\n        _decimals = decimals_;\n    }\n\n    /**\n     * @notice Returns the number of decimals\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @notice Mint tokens to an address\n     * @param to Recipient address\n     * @param amount Amount to mint (in token's decimals)\n     */\n    function mint(address to, uint256 amount) external {\n        require(to != address(0), \"Cannot mint to zero address\");\n        _mint(to, amount);\n        emit Minted(to, amount);\n    }\n\n    /**\n     * @notice Burn tokens from an address\n     * @param from Address to burn from\n     * @param amount Amount to burn (in token's decimals)\n     */\n    function burn(address from, uint256 amount) external {\n        require(from != address(0), \"Cannot burn from zero address\");\n        _burn(from, amount);\n        emit Burned(from, amount);\n    }\n\n    /**\n     * @notice Mint tokens to multiple addresses (useful for testing)\n     * @param recipients Array of recipient addresses\n     * @param amounts Array of amounts to mint\n     */\n    function batchMint(address[] calldata recipients, uint256[] calldata amounts) external {\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\n        for (uint256 i = 0; i < recipients.length; i++) {\n            require(recipients[i] != address(0), \"Cannot mint to zero address\");\n            _mint(recipients[i], amounts[i]);\n            emit Minted(recipients[i], amounts[i]);\n        }\n    }\n}\n\n"
      },
      "project/contracts/MockMorphoVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title MockMorphoVault\n * @notice Mock Morpho vault for testing yield generation\n * @dev Simulates ERC4626-like vault behavior for hackathon\n */\ncontract MockMorphoVault {\n    using SafeERC20 for IERC20;\n    \n    IERC20 public immutable asset;\n    mapping(address => uint256) public balanceOf;\n    uint256 public totalSupply;\n    uint256 public totalAssets;\n    uint256 private yieldAccumulator;\n\n    constructor(address _asset) {\n        asset = IERC20(_asset);\n    }\n\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares) {\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n        \n        shares = totalSupply == 0 ? assets : (assets * totalSupply) / totalAssets;\n        balanceOf[receiver] += shares;\n        totalSupply += shares;\n        totalAssets += assets;\n        \n        return shares;\n    }\n\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares) {\n        shares = (assets * totalSupply) / totalAssets;\n        require(balanceOf[owner] >= shares, \"Insufficient shares\");\n        \n        balanceOf[owner] -= shares;\n        totalSupply -= shares;\n        totalAssets -= assets;\n        \n        asset.safeTransfer(receiver, assets);\n        return shares;\n    }\n\n    function convertToAssets(uint256 shares) external view returns (uint256) {\n        if (totalSupply == 0) return shares;\n        return (shares * (totalAssets + yieldAccumulator)) / totalSupply;\n    }\n\n    function convertToShares(uint256 assets) external view returns (uint256) {\n        if (totalSupply == 0) return assets;\n        return (assets * totalSupply) / (totalAssets + yieldAccumulator);\n    }\n\n    function simulateYield(uint256 yieldAmount) external {\n        yieldAccumulator += yieldAmount;\n    }\n}\n\n\n"
      },
      "project/contracts/MockPyUSD.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MockPyUSD\n * @notice Mock PayPal USD stablecoin for testing\n * @dev Simple ERC20 with minting capability for Hackathon development\n */\ncontract MockPyUSD is ERC20 {\n    uint8 private constant DECIMALS = 6; // PyUSD uses 6 decimals\n\n    constructor() ERC20(\"Mock PayPal USD\", \"PYUSD\") {\n        // Mint initial supply for testing (1M PYUSD)\n        _mint(msg.sender, 1_000_000 * 10 ** DECIMALS);\n    }\n\n    /**\n     * @notice Returns decimals (6 for PyUSD)\n     */\n    function decimals() public pure override returns (uint8) {\n        return DECIMALS;\n    }\n\n    /**\n     * @notice Mint tokens for testing purposes - anyone can mint for hackathon\n     * @param to Recipient address\n     * @param amount Amount to mint\n     */\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n}\n\n"
      },
      "project/contracts/mocks/MockMorphoVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IMorphoVault.sol\";\n\n/**\n * @title MockMorphoVault\n * @notice Mock implementation of Morpho Vault for testing\n * @dev Simulates yield generation for testing subscription contracts\n */\ncontract MockMorphoVault is IMorphoVault {\n    using SafeERC20 for IERC20;\n    \n    IERC20 public immutable assetToken;\n    mapping(address => uint256) public balanceOf;\n    uint256 public totalSupply;\n    uint256 public totalAssets;\n    uint256 private yieldAccumulator;\n\n    event YieldSimulated(uint256 amount, uint256 newTotalAssets);\n\n    constructor(address _asset) {\n        require(_asset != address(0), \"Invalid asset address\");\n        assetToken = IERC20(_asset);\n    }\n\n    /**\n     * @notice Deposit assets and receive shares\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares) {\n        require(assets > 0, \"Cannot deposit 0\");\n        require(receiver != address(0), \"Invalid receiver\");\n\n        assetToken.safeTransferFrom(msg.sender, address(this), assets);\n        \n        // Calculate shares: first deposit gets 1:1, later deposits account for yield\n        shares = totalSupply == 0 ? assets : (assets * totalSupply) / totalAssets;\n        \n        balanceOf[receiver] += shares;\n        totalSupply += shares;\n        totalAssets += assets;\n        \n        return shares;\n    }\n\n    /**\n     * @notice Withdraw assets by burning shares\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares) {\n        require(assets > 0, \"Cannot withdraw 0\");\n        require(receiver != address(0), \"Invalid receiver\");\n        \n        // Calculate shares needed (including accumulated yield)\n        uint256 totalValue = totalAssets + yieldAccumulator;\n        shares = (assets * totalSupply) / totalValue;\n        \n        require(balanceOf[owner] >= shares, \"Insufficient shares\");\n        \n        balanceOf[owner] -= shares;\n        totalSupply -= shares;\n        totalAssets -= assets;\n        \n        // If we have accumulated yield, use it proportionally\n        if (yieldAccumulator > 0) {\n            uint256 yieldPortion = (assets * yieldAccumulator) / totalValue;\n            yieldAccumulator -= yieldPortion;\n        }\n        \n        assetToken.safeTransfer(receiver, assets);\n        return shares;\n    }\n\n    /**\n     * @notice Convert shares to assets (including yield)\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256) {\n        if (totalSupply == 0) return shares;\n        return (shares * (totalAssets + yieldAccumulator)) / totalSupply;\n    }\n\n    /**\n     * @notice Get the underlying asset\n     */\n    function asset() external view returns (address) {\n        return address(assetToken);\n    }\n\n    /**\n     * @notice Simulate yield generation for testing\n     * @dev Only for testing - simulates APY without actual DeFi integration\n     */\n    function simulateYield(uint256 yieldAmount) external {\n        yieldAccumulator += yieldAmount;\n        emit YieldSimulated(yieldAmount, totalAssets + yieldAccumulator);\n    }\n\n    /**\n     * @notice Simulate time-based yield (APY calculation)\n     * @param annualRateBps Annual rate in basis points (e.g., 450 = 4.5%)\n     * @param timeElapsed Time elapsed in seconds\n     */\n    function simulateTimeBasedYield(uint256 annualRateBps, uint256 timeElapsed) external {\n        require(totalAssets > 0, \"No assets deposited\");\n        \n        // Calculate yield: assets * rate * time / (365 days * 10000)\n        uint256 yieldAmount = (totalAssets * annualRateBps * timeElapsed) / (365 days * 10000);\n        yieldAccumulator += yieldAmount;\n        \n        emit YieldSimulated(yieldAmount, totalAssets + yieldAccumulator);\n    }\n\n    /**\n     * @notice Get current yield accumulated\n     */\n    function getCurrentYield() external view returns (uint256) {\n        return yieldAccumulator;\n    }\n\n    /**\n     * @notice Get total value (assets + yield)\n     */\n    function getTotalValue() external view returns (uint256) {\n        return totalAssets + yieldAccumulator;\n    }\n}\n\n\n"
      },
      "project/contracts/PyUSDSubscription.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title PyUSDSubscription\n * @dev Manages recurring subscription payments using PyUSD on Arbitrum\n */\ncontract PyUSDSubscription is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    struct Plan {\n        uint256 id;\n        string name;\n        uint256 amount; // Amount in PyUSD (6 decimals)\n        uint256 interval; // Billing interval in seconds\n        bool active;\n        address merchant;\n    }\n\n    struct Subscription {\n        uint256 planId;\n        address subscriber;\n        uint256 startTime;\n        uint256 nextBillingTime;\n        bool active;\n        uint256 totalPaid;\n    }\n\n    IERC20 public immutable pyusdToken;\n    \n    uint256 public planCounter;\n    uint256 public subscriptionCounter;\n    uint256 public platformFeePercent = 250; // 2.5% (basis points)\n    address public feeCollector;\n\n    mapping(uint256 => Plan) public plans;\n    mapping(uint256 => Subscription) public subscriptions;\n    mapping(address => uint256[]) public merchantPlans;\n    mapping(address => uint256[]) public userSubscriptions;\n\n    event PlanCreated(\n        uint256 indexed planId,\n        address indexed merchant,\n        string name,\n        uint256 amount,\n        uint256 interval\n    );\n\n    event PlanUpdated(\n        uint256 indexed planId,\n        string name,\n        uint256 amount,\n        bool active\n    );\n\n    event SubscriptionCreated(\n        uint256 indexed subscriptionId,\n        uint256 indexed planId,\n        address indexed subscriber,\n        uint256 startTime\n    );\n\n    event PaymentProcessed(\n        uint256 indexed subscriptionId,\n        uint256 indexed planId,\n        address indexed subscriber,\n        uint256 amount,\n        uint256 fee,\n        uint256 timestamp\n    );\n\n    event SubscriptionCancelled(\n        uint256 indexed subscriptionId,\n        address indexed subscriber,\n        uint256 timestamp\n    );\n\n    event PlatformFeeUpdated(uint256 newFeePercent);\n    event FeeCollectorUpdated(address newFeeCollector);\n\n    constructor(address _pyusdToken, address _feeCollector) Ownable(msg.sender) {\n        require(_pyusdToken != address(0), \"Invalid PyUSD token address\");\n        require(_feeCollector != address(0), \"Invalid fee collector address\");\n        pyusdToken = IERC20(_pyusdToken);\n        feeCollector = _feeCollector;\n    }\n\n    /**\n     * @dev Creates a new subscription plan\n     */\n    function createPlan(\n        string memory name,\n        uint256 amount,\n        uint256 interval\n    ) external returns (uint256) {\n        require(bytes(name).length > 0, \"Plan name cannot be empty\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(interval >= 1 days, \"Interval must be at least 1 day\");\n\n        planCounter++;\n        uint256 planId = planCounter;\n\n        plans[planId] = Plan({\n            id: planId,\n            name: name,\n            amount: amount,\n            interval: interval,\n            active: true,\n            merchant: msg.sender\n        });\n\n        merchantPlans[msg.sender].push(planId);\n\n        emit PlanCreated(planId, msg.sender, name, amount, interval);\n        return planId;\n    }\n\n    /**\n     * @dev Updates an existing plan\n     */\n    function updatePlan(\n        uint256 planId,\n        string memory name,\n        uint256 amount,\n        bool active\n    ) external {\n        Plan storage plan = plans[planId];\n        require(plan.id != 0, \"Plan does not exist\");\n        require(plan.merchant == msg.sender, \"Only plan owner can update\");\n\n        if (bytes(name).length > 0) {\n            plan.name = name;\n        }\n        if (amount > 0) {\n            plan.amount = amount;\n        }\n        plan.active = active;\n\n        emit PlanUpdated(planId, plan.name, plan.amount, active);\n    }\n\n    /**\n     * @dev Subscribe to a plan\n     */\n    function subscribe(uint256 planId) external nonReentrant returns (uint256) {\n        Plan storage plan = plans[planId];\n        require(plan.id != 0, \"Plan does not exist\");\n        require(plan.active, \"Plan is not active\");\n        require(plan.merchant != msg.sender, \"Cannot subscribe to own plan\");\n\n        // Process initial payment\n        uint256 fee = (plan.amount * platformFeePercent) / 10000;\n        uint256 merchantAmount = plan.amount - fee;\n\n        pyusdToken.safeTransferFrom(msg.sender, plan.merchant, merchantAmount);\n        pyusdToken.safeTransferFrom(msg.sender, feeCollector, fee);\n\n        subscriptionCounter++;\n        uint256 subscriptionId = subscriptionCounter;\n\n        uint256 nextBilling = block.timestamp + plan.interval;\n\n        subscriptions[subscriptionId] = Subscription({\n            planId: planId,\n            subscriber: msg.sender,\n            startTime: block.timestamp,\n            nextBillingTime: nextBilling,\n            active: true,\n            totalPaid: plan.amount\n        });\n\n        userSubscriptions[msg.sender].push(subscriptionId);\n\n        emit SubscriptionCreated(subscriptionId, planId, msg.sender, block.timestamp);\n        emit PaymentProcessed(subscriptionId, planId, msg.sender, plan.amount, fee, block.timestamp);\n\n        return subscriptionId;\n    }\n\n    /**\n     * @dev Process recurring payment for a subscription\n     */\n    function processPayment(uint256 subscriptionId) external nonReentrant {\n        Subscription storage subscription = subscriptions[subscriptionId];\n        require(subscription.active, \"Subscription is not active\");\n        require(block.timestamp >= subscription.nextBillingTime, \"Payment not due yet\");\n\n        Plan storage plan = plans[subscription.planId];\n        require(plan.active, \"Plan is no longer active\");\n\n        uint256 fee = (plan.amount * platformFeePercent) / 10000;\n        uint256 merchantAmount = plan.amount - fee;\n\n        pyusdToken.safeTransferFrom(subscription.subscriber, plan.merchant, merchantAmount);\n        pyusdToken.safeTransferFrom(subscription.subscriber, feeCollector, fee);\n\n        subscription.nextBillingTime = block.timestamp + plan.interval;\n        subscription.totalPaid += plan.amount;\n\n        emit PaymentProcessed(\n            subscriptionId,\n            subscription.planId,\n            subscription.subscriber,\n            plan.amount,\n            fee,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Cancel a subscription\n     */\n    function cancelSubscription(uint256 subscriptionId) external {\n        Subscription storage subscription = subscriptions[subscriptionId];\n        require(subscription.active, \"Subscription is not active\");\n        require(\n            subscription.subscriber == msg.sender || \n            plans[subscription.planId].merchant == msg.sender,\n            \"Not authorized\"\n        );\n\n        subscription.active = false;\n\n        emit SubscriptionCancelled(subscriptionId, subscription.subscriber, block.timestamp);\n    }\n\n    /**\n     * @dev Get all plans created by a merchant\n     */\n    function getMerchantPlans(address merchant) external view returns (uint256[] memory) {\n        return merchantPlans[merchant];\n    }\n\n    /**\n     * @dev Get all subscriptions of a user\n     */\n    function getUserSubscriptions(address user) external view returns (uint256[] memory) {\n        return userSubscriptions[user];\n    }\n\n    /**\n     * @dev Check if a subscription needs payment\n     */\n    function isPaymentDue(uint256 subscriptionId) external view returns (bool) {\n        Subscription storage subscription = subscriptions[subscriptionId];\n        return subscription.active && block.timestamp >= subscription.nextBillingTime;\n    }\n\n    /**\n     * @dev Update platform fee (only owner)\n     */\n    function updatePlatformFee(uint256 newFeePercent) external onlyOwner {\n        require(newFeePercent <= 1000, \"Fee cannot exceed 10%\");\n        platformFeePercent = newFeePercent;\n        emit PlatformFeeUpdated(newFeePercent);\n    }\n\n    /**\n     * @dev Update fee collector address (only owner)\n     */\n    function updateFeeCollector(address newFeeCollector) external onlyOwner {\n        require(newFeeCollector != address(0), \"Invalid address\");\n        feeCollector = newFeeCollector;\n        emit FeeCollectorUpdated(newFeeCollector);\n    }\n}\n\n"
      },
      "project/contracts/SubscriptionManager.old.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IMorphoVault {\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n    function balanceOf(address account) external view returns (uint256);\n    function convertToAssets(uint256 shares) external view returns (uint256);\n    function asset() external view returns (address);\n}\n\n/**\n * @title SubscriptionManager\n * @notice Manage subscriptions with PyUSD and yield generation via Morpho\n * @dev Supports monthly and yearly subscriptions with automated payments\n */\ncontract SubscriptionManager is Ownable, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n\n    enum SubscriptionType { MONTHLY, YEARLY }\n    enum SubscriptionStatus { NONE, ACTIVE, CANCELLED, EXPIRED }\n\n    struct Subscription {\n        SubscriptionType subType;\n        SubscriptionStatus status;\n        uint256 monthlyRate;\n        uint256 yearlyRate;\n        uint256 startTime;\n        uint256 lastPayment;\n        uint256 expirationTime;\n        bool autoPayEnabled;\n        uint256 stakedAmount;\n        uint256 morphoShares;\n    }\n\n    struct SubscriptionPlan {\n        uint256 monthlyRate;\n        uint256 yearlyRate;\n        bool isActive;\n        string name;\n    }\n\n    mapping(address => mapping(uint256 => Subscription)) public subscriptions;\n    mapping(uint256 => SubscriptionPlan) public subscriptionPlans;\n    mapping(address => uint256[]) public userActiveSubscriptions;\n    \n    uint256 public nextPlanId = 1;\n    uint256 public constant SECONDS_IN_MONTH = 30 days;\n    uint256 public constant SECONDS_IN_YEAR = 365 days;\n    \n    IERC20 public immutable paymentToken;\n    IMorphoVault public immutable morphoVault;\n    \n    address public backend;\n    uint256 public totalYearlyDeposits;\n\n    event SubscriptionCreated(\n        address indexed user,\n        uint256 indexed planId,\n        SubscriptionType subType,\n        uint256 amount,\n        bool autoPayEnabled\n    );\n    \n    event MonthlyPaymentProcessed(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 amount,\n        uint256 timestamp\n    );\n    \n    event YearlyStakeDeposited(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 amount,\n        uint256 morphoShares\n    );\n    \n    event SubscriptionCancelled(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 refundAmount\n    );\n    \n    event YieldWithdrawn(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 amount\n    );\n\n    modifier onlyBackend() {\n        require(msg.sender == backend, \"Only backend\");\n        _;\n    }\n\n    modifier validPlan(uint256 planId) {\n        require(subscriptionPlans[planId].isActive, \"Invalid plan\");\n        _;\n    }\n\n    constructor(\n        address _paymentToken,\n        address _morphoVault,\n        address _backend,\n        address _owner\n    ) Ownable(_owner) {\n        paymentToken = IERC20(_paymentToken);\n        morphoVault = IMorphoVault(_morphoVault);\n        backend = _backend;\n        \n        require(morphoVault.asset() == _paymentToken, \"Asset mismatch\");\n    }\n\n    function createSubscriptionPlan(\n        uint256 _monthlyRate,\n        uint256 _yearlyRate,\n        string memory _name\n    ) external onlyOwner returns (uint256) {\n        require(_monthlyRate > 0 && _yearlyRate > 0, \"Invalid rates\");\n        \n        uint256 planId = nextPlanId++;\n        subscriptionPlans[planId] = SubscriptionPlan({\n            monthlyRate: _monthlyRate,\n            yearlyRate: _yearlyRate,\n            isActive: true,\n            name: _name\n        });\n        \n        return planId;\n    }\n\n    function subscribeMonthly(\n        uint256 planId,\n        bool enableAutoPay,\n        bool stakeYearlyAmount\n    ) external validPlan(planId) nonReentrant whenNotPaused {\n        require(subscriptions[msg.sender][planId].status == SubscriptionStatus.NONE, \"Already subscribed\");\n        \n        SubscriptionPlan memory plan = subscriptionPlans[planId];\n        uint256 totalAmount = stakeYearlyAmount ? plan.yearlyRate : plan.monthlyRate;\n\n        paymentToken.safeTransferFrom(msg.sender, address(this), totalAmount);\n\n        uint256 morphoShares = 0;\n        uint256 stakedAmount = 0;\n\n        if (stakeYearlyAmount) {\n            stakedAmount = plan.yearlyRate;\n            paymentToken.safeIncreaseAllowance(address(morphoVault), stakedAmount);\n            morphoShares = morphoVault.deposit(stakedAmount, address(this));\n        }\n\n        subscriptions[msg.sender][planId] = Subscription({\n            subType: SubscriptionType.MONTHLY,\n            status: SubscriptionStatus.ACTIVE,\n            monthlyRate: plan.monthlyRate,\n            yearlyRate: plan.yearlyRate,\n            startTime: block.timestamp,\n            lastPayment: block.timestamp,\n            expirationTime: block.timestamp + SECONDS_IN_MONTH,\n            autoPayEnabled: enableAutoPay,\n            stakedAmount: stakedAmount,\n            morphoShares: morphoShares\n        });\n\n        userActiveSubscriptions[msg.sender].push(planId);\n\n        emit SubscriptionCreated(msg.sender, planId, SubscriptionType.MONTHLY, totalAmount, enableAutoPay);\n        \n        if (stakeYearlyAmount) {\n            emit YearlyStakeDeposited(msg.sender, planId, stakedAmount, morphoShares);\n        }\n    }\n\n    function subscribeYearly(\n        uint256 planId\n    ) external validPlan(planId) nonReentrant whenNotPaused {\n        require(subscriptions[msg.sender][planId].status == SubscriptionStatus.NONE, \"Already subscribed\");\n        \n        SubscriptionPlan memory plan = subscriptionPlans[planId];\n        \n        paymentToken.safeTransferFrom(msg.sender, address(this), plan.yearlyRate);\n\n        paymentToken.safeIncreaseAllowance(address(morphoVault), plan.yearlyRate);\n        uint256 morphoShares = morphoVault.deposit(plan.yearlyRate, address(this));\n        totalYearlyDeposits += plan.yearlyRate;\n\n        subscriptions[msg.sender][planId] = Subscription({\n            subType: SubscriptionType.YEARLY,\n            status: SubscriptionStatus.ACTIVE,\n            monthlyRate: plan.monthlyRate,\n            yearlyRate: plan.yearlyRate,\n            startTime: block.timestamp,\n            lastPayment: block.timestamp,\n            expirationTime: block.timestamp + SECONDS_IN_YEAR,\n            autoPayEnabled: false,\n            stakedAmount: 0,\n            morphoShares: morphoShares\n        });\n\n        userActiveSubscriptions[msg.sender].push(planId);\n\n        emit SubscriptionCreated(msg.sender, planId, SubscriptionType.YEARLY, plan.yearlyRate, false);\n    }\n\n    function processMonthlyPayment(\n        address user,\n        uint256 planId\n    ) external onlyBackend nonReentrant {\n        Subscription storage sub = subscriptions[user][planId];\n        require(sub.status == SubscriptionStatus.ACTIVE, \"Not active\");\n        require(sub.subType == SubscriptionType.MONTHLY, \"Not monthly\");\n        require(sub.autoPayEnabled, \"Auto-pay disabled\");\n        require(block.timestamp >= sub.expirationTime - 1 days, \"Too early\");\n\n        uint256 paymentAmount = sub.monthlyRate;\n\n        if (sub.stakedAmount > 0) {\n            require(sub.stakedAmount >= paymentAmount, \"Insufficient stake\");\n            sub.stakedAmount -= paymentAmount;\n        } else {\n            paymentToken.safeTransferFrom(user, address(this), paymentAmount);\n        }\n\n        sub.lastPayment = block.timestamp;\n        sub.expirationTime = block.timestamp + SECONDS_IN_MONTH;\n\n        emit MonthlyPaymentProcessed(user, planId, paymentAmount, block.timestamp);\n    }\n\n    function cancelSubscription(uint256 planId) external nonReentrant {\n        Subscription storage sub = subscriptions[msg.sender][planId];\n        require(sub.status == SubscriptionStatus.ACTIVE, \"Not active\");\n\n        sub.status = SubscriptionStatus.CANCELLED;\n        uint256 refundAmount = 0;\n\n        if (sub.subType == SubscriptionType.MONTHLY && sub.stakedAmount > 0) {\n            refundAmount = sub.stakedAmount;\n            if (sub.morphoShares > 0) {\n                uint256 assets = morphoVault.convertToAssets(sub.morphoShares);\n                morphoVault.withdraw(assets, address(this), address(this));\n                refundAmount = assets;\n            }\n            sub.stakedAmount = 0;\n            sub.morphoShares = 0;\n        } else if (sub.subType == SubscriptionType.YEARLY) {\n            uint256 remainingTime = sub.expirationTime > block.timestamp ? \n                sub.expirationTime - block.timestamp : 0;\n            if (remainingTime > 0) {\n                uint256 totalAssets = morphoVault.convertToAssets(sub.morphoShares);\n                refundAmount = (totalAssets * remainingTime) / SECONDS_IN_YEAR;\n                \n                morphoVault.withdraw(refundAmount, address(this), address(this));\n                totalYearlyDeposits -= refundAmount;\n            }\n            sub.morphoShares = 0;\n        }\n\n        _removeFromActiveSubscriptions(msg.sender, planId);\n\n        if (refundAmount > 0) {\n            paymentToken.safeTransfer(msg.sender, refundAmount);\n        }\n\n        emit SubscriptionCancelled(msg.sender, planId, refundAmount);\n    }\n\n    function withdrawYield(uint256 planId) external nonReentrant {\n        Subscription storage sub = subscriptions[msg.sender][planId];\n        require(sub.status == SubscriptionStatus.ACTIVE, \"Not active\");\n        require(sub.morphoShares > 0, \"No shares\");\n\n        uint256 currentAssets = morphoVault.convertToAssets(sub.morphoShares);\n        require(currentAssets > sub.stakedAmount, \"No yield\");\n\n        uint256 yieldAmount = currentAssets - sub.stakedAmount;\n        morphoVault.withdraw(yieldAmount, address(this), address(this));\n\n        sub.morphoShares = morphoVault.balanceOf(address(this));\n\n        paymentToken.safeTransfer(msg.sender, yieldAmount);\n\n        emit YieldWithdrawn(msg.sender, planId, yieldAmount);\n    }\n\n    function getSubscription(address user, uint256 planId) external view returns (Subscription memory) {\n        return subscriptions[user][planId];\n    }\n\n    function getUserActiveSubscriptions(address user) external view returns (uint256[] memory) {\n        return userActiveSubscriptions[user];\n    }\n\n    function checkAndUpdateExpiration(address user, uint256 planId) external {\n        Subscription storage sub = subscriptions[user][planId];\n        if (sub.status == SubscriptionStatus.ACTIVE && block.timestamp > sub.expirationTime) {\n            sub.status = SubscriptionStatus.EXPIRED;\n            _removeFromActiveSubscriptions(user, planId);\n        }\n    }\n\n    function setBackend(address _backend) external onlyOwner {\n        backend = _backend;\n    }\n\n    function togglePlanStatus(uint256 planId) external onlyOwner {\n        subscriptionPlans[planId].isActive = !subscriptionPlans[planId].isActive;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function _removeFromActiveSubscriptions(address user, uint256 planId) internal {\n        uint256[] storage activeSubs = userActiveSubscriptions[user];\n        for (uint256 i = 0; i < activeSubs.length; i++) {\n            if (activeSubs[i] == planId) {\n                activeSubs[i] = activeSubs[activeSubs.length - 1];\n                activeSubs.pop();\n                break;\n            }\n        }\n    }\n}\n"
      },
      "project/contracts/SubscriptionManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IMetaMorpho} from \"../lib/metamorpho/src/interfaces/IMetaMorpho.sol\";\n\n/**\n * @title SubscriptionManager\n * @dev A subscription contract with two business models:\n * 1. Monthly subscriptions with automatic payments and optional yearly staking\n * 2. Yearly subscriptions with immediate payment and yield generation\n */\ncontract SubscriptionManager is Ownable, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n\n    // Subscription types\n    enum SubscriptionType {\n        MONTHLY,\n        YEARLY\n    }\n\n    // Subscription status\n    enum SubscriptionStatus {\n        NONE,\n        ACTIVE,\n        CANCELLED,\n        EXPIRED\n    }\n\n    struct Subscription {\n        SubscriptionType subType;\n        SubscriptionStatus status;\n        uint256 monthlyRate;\n        uint256 yearlyRate;\n        uint256 startTime;\n        uint256 lastPayment;\n        uint256 expirationTime;\n        bool autoPayEnabled;\n        uint256 stakedAmount; // For yearly staking in monthly subscriptions\n        uint256 morphoShares; // Shares in Morpho vault\n    }\n\n    struct SubscriptionPlan {\n        uint256 monthlyRate;\n        uint256 yearlyRate;\n        bool isActive;\n        string name;\n    }\n\n    // State variables\n    mapping(address => mapping(uint256 => Subscription)) public subscriptions; // user => planId => subscription\n    mapping(uint256 => SubscriptionPlan) public subscriptionPlans;\n    mapping(address => uint256[]) public userActiveSubscriptions; // user => array of planIds\n\n    uint256 public nextPlanId = 1;\n    uint256 public constant SECONDS_IN_MONTH = 30 days;\n    uint256 public constant SECONDS_IN_YEAR = 365 days;\n\n    IERC20 public immutable paymentToken; // ETH or ERC20 token for payments\n    IMetaMorpho public immutable morphoVault; // Morpho vault for yield generation\n\n    address public backend; // Backend address for automated payments\n    uint256 public totalYearlyDeposits; // Total deposits in Morpho from yearly subscriptions\n\n    // Events\n    event SubscriptionCreated(\n        address indexed user,\n        uint256 indexed planId,\n        SubscriptionType subType,\n        uint256 amount,\n        bool autoPayEnabled\n    );\n\n    event MonthlyPaymentProcessed(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event YearlyStakeDeposited(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 amount,\n        uint256 morphoShares\n    );\n\n    event SubscriptionCancelled(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 refundAmount\n    );\n\n    // event YieldWithdrawn(\n    //     address indexed user,\n    //     uint256 indexed planId,\n    //     uint256 amount\n    // );\n\n    event BusinessOwnerWithdrawal(uint256 amount, uint256 remainingBalance);\n\n    event AutoPaymentPermissionGranted(\n        address indexed user,\n        uint256 indexed planId,\n        uint256 allowanceAmount\n    );\n\n    modifier onlyBackend() {\n        require(msg.sender == backend, \"Only backend can call this function\");\n        _;\n    }\n\n    modifier validPlan(uint256 planId) {\n        require(subscriptionPlans[planId].isActive, \"Invalid or inactive plan\");\n        _;\n    }\n\n    constructor(\n        address _paymentToken,\n        address _morphoVault,\n        address _backend,\n        address _owner\n    ) Ownable(_owner) {\n        require(_paymentToken != address(0), \"Payment token required\");\n        require(_morphoVault != address(0), \"Morpho vault required\");\n\n        paymentToken = IERC20(_paymentToken);\n        morphoVault = IMetaMorpho(_morphoVault);\n        backend = _backend;\n\n        // Verify Morpho vault asset matches payment token\n        require(\n            morphoVault.asset() == _paymentToken,\n            \"Morpho vault asset mismatch\"\n        );\n    }\n\n    /**\n     * @dev Create a new subscription plan\n     */\n    function createSubscriptionPlan(\n        uint256 _monthlyRate,\n        uint256 _yearlyRate,\n        string memory _name\n    ) external onlyOwner returns (uint256) {\n        require(_monthlyRate > 0 && _yearlyRate > 0, \"Rates must be positive\");\n\n        uint256 planId = nextPlanId++;\n        subscriptionPlans[planId] = SubscriptionPlan({\n            monthlyRate: _monthlyRate,\n            yearlyRate: _yearlyRate,\n            isActive: true,\n            name: _name\n        });\n\n        return planId;\n    }\n\n    /**\n     * @dev Subscribe with monthly payments\n     * @param planId The subscription plan ID\n     * @param stakeYearlyAmount Whether to stake one year worth of payments upfront\n     */\n    function subscribeMonthly(\n        uint256 planId,\n        bool stakeYearlyAmount\n    ) external validPlan(planId) nonReentrant whenNotPaused {\n        bool enableAutoPay = true; // Default to auto-pay enabled\n        require(\n            subscriptions[msg.sender][planId].status == SubscriptionStatus.NONE,\n            \"Already subscribed\"\n        );\n\n        SubscriptionPlan memory plan = subscriptionPlans[planId];\n        uint256 totalAmount = plan.monthlyRate;\n\n        if (stakeYearlyAmount) {\n            totalAmount = plan.yearlyRate;\n        }\n\n        // Collect PYUSD from subscriber\n        paymentToken.safeTransferFrom(msg.sender, address(this), totalAmount);\n\n        uint256 morphoShares = 0;\n        uint256 stakedAmount = 0;\n\n        if (stakeYearlyAmount) {\n            // Deposit yearly amount to Morpho for yield\n            stakedAmount = plan.yearlyRate;\n            paymentToken.safeIncreaseAllowance(\n                address(morphoVault),\n                stakedAmount\n            );\n            morphoShares = morphoVault.deposit(stakedAmount, address(this));\n        }\n\n        subscriptions[msg.sender][planId] = Subscription({\n            subType: SubscriptionType.MONTHLY,\n            status: SubscriptionStatus.ACTIVE,\n            monthlyRate: plan.monthlyRate,\n            yearlyRate: plan.yearlyRate,\n            startTime: block.timestamp,\n            lastPayment: block.timestamp,\n            expirationTime: block.timestamp + SECONDS_IN_MONTH,\n            autoPayEnabled: enableAutoPay,\n            stakedAmount: stakedAmount,\n            morphoShares: morphoShares\n        });\n\n        userActiveSubscriptions[msg.sender].push(planId);\n\n        emit SubscriptionCreated(\n            msg.sender,\n            planId,\n            SubscriptionType.MONTHLY,\n            totalAmount,\n            enableAutoPay\n        );\n\n        if (enableAutoPay) {\n            emit AutoPaymentPermissionGranted(\n                msg.sender,\n                planId,\n                plan.monthlyRate\n            );\n        }\n\n        if (stakeYearlyAmount) {\n            emit YearlyStakeDeposited(\n                msg.sender,\n                planId,\n                stakedAmount,\n                morphoShares\n            );\n        }\n    }\n\n    /**\n     * @dev Subscribe with yearly payment\n     * @param planId The subscription plan ID\n     */\n    function subscribeYearly(\n        uint256 planId\n    ) external validPlan(planId) nonReentrant whenNotPaused {\n        require(\n            subscriptions[msg.sender][planId].status == SubscriptionStatus.NONE,\n            \"Already subscribed\"\n        );\n\n        SubscriptionPlan memory plan = subscriptionPlans[planId];\n\n        // Collect PYUSD from subscriber\n        paymentToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            plan.yearlyRate\n        );\n\n        // Deposit to Morpho vault for yield generation\n        paymentToken.safeIncreaseAllowance(\n            address(morphoVault),\n            plan.yearlyRate\n        );\n        uint256 morphoShares = morphoVault.deposit(\n            plan.yearlyRate,\n            address(this)\n        );\n        totalYearlyDeposits += plan.yearlyRate;\n\n        subscriptions[msg.sender][planId] = Subscription({\n            subType: SubscriptionType.YEARLY,\n            status: SubscriptionStatus.ACTIVE,\n            monthlyRate: plan.monthlyRate,\n            yearlyRate: plan.yearlyRate,\n            startTime: block.timestamp,\n            lastPayment: block.timestamp,\n            expirationTime: block.timestamp + SECONDS_IN_YEAR,\n            autoPayEnabled: false,\n            stakedAmount: 0,\n            morphoShares: morphoShares\n        });\n\n        userActiveSubscriptions[msg.sender].push(planId);\n\n        emit SubscriptionCreated(\n            msg.sender,\n            planId,\n            SubscriptionType.YEARLY,\n            plan.yearlyRate,\n            false\n        );\n    }\n\n    /**\n     * @dev Process monthly payment (called by backend for auto-pay users)\n     */\n    function processMonthlyPayment(\n        address user,\n        uint256 planId\n    ) external onlyBackend nonReentrant {\n        Subscription storage sub = subscriptions[user][planId];\n        require(\n            sub.status == SubscriptionStatus.ACTIVE,\n            \"Subscription not active\"\n        );\n        require(\n            sub.subType == SubscriptionType.MONTHLY,\n            \"Not a monthly subscription\"\n        );\n        require(sub.autoPayEnabled, \"Auto-pay not enabled\");\n        require(\n            block.timestamp >= sub.expirationTime - 1 days,\n            \"Too early for payment\"\n        );\n\n        uint256 paymentAmount = sub.monthlyRate;\n\n        if (sub.stakedAmount > 0) {\n            // Deduct from staked amount held in Morpho vault\n            require(\n                sub.stakedAmount >= paymentAmount,\n                \"Insufficient staked amount\"\n            );\n\n            uint256 burnedShares = morphoVault.withdraw(\n                paymentAmount,\n                address(this),\n                address(this)\n            );\n\n            sub.morphoShares -= burnedShares;\n            sub.stakedAmount -= paymentAmount;\n        } else {\n            // Transfer PYUSD directly from user's wallet\n            paymentToken.safeTransferFrom(user, address(this), paymentAmount);\n        }\n\n        sub.lastPayment = block.timestamp;\n        sub.expirationTime = block.timestamp + SECONDS_IN_MONTH;\n\n        // Forward payment to the business owner\n        paymentToken.safeTransfer(owner(), paymentAmount);\n\n        emit MonthlyPaymentProcessed(\n            user,\n            planId,\n            paymentAmount,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Cancel subscription and handle refunds\n     */\n    function cancelSubscription(uint256 planId) external nonReentrant {\n        Subscription storage sub = subscriptions[msg.sender][planId];\n        require(\n            sub.status == SubscriptionStatus.ACTIVE,\n            \"Subscription not active\"\n        );\n\n        sub.status = SubscriptionStatus.CANCELLED;\n        uint256 refundAmount = 0;\n\n        if (sub.subType == SubscriptionType.MONTHLY && sub.stakedAmount > 0) {\n            // Refund remaining staked amount for monthly subscriptions\n            if (sub.morphoShares > 0) {\n                refundAmount = morphoVault.redeem(\n                    sub.morphoShares,\n                    address(this),\n                    address(this)\n                );\n            } else {\n                refundAmount = sub.stakedAmount;\n            }\n            sub.stakedAmount = 0;\n            sub.morphoShares = 0;\n        } else if (sub.subType == SubscriptionType.YEARLY) {\n            // Calculate pro-rata refund for yearly subscriptions\n            uint256 remainingTime = sub.expirationTime > block.timestamp\n                ? sub.expirationTime - block.timestamp\n                : 0;\n            if (remainingTime > 0) {\n                uint256 totalAssets = morphoVault.convertToAssets(\n                    sub.morphoShares\n                );\n                refundAmount = (totalAssets * remainingTime) / SECONDS_IN_YEAR;\n\n                morphoVault.withdraw(\n                    refundAmount,\n                    address(this),\n                    address(this)\n                );\n                totalYearlyDeposits -= refundAmount;\n            }\n            sub.morphoShares = 0;\n        }\n\n        // Remove from active subscriptions\n        _removeFromActiveSubscriptions(msg.sender, planId);\n\n        if (refundAmount > 0) {\n            paymentToken.safeTransfer(msg.sender, refundAmount);\n        }\n\n        emit SubscriptionCancelled(msg.sender, planId, refundAmount);\n    }\n\n    // /**\n    //  * @dev Withdraw yield earned from staked amounts (for monthly subscribers)\n    //  */\n    // function withdrawYield(uint256 planId) external nonReentrant {\n    //     Subscription storage sub = subscriptions[msg.sender][planId];\n    //     require(\n    //         sub.status == SubscriptionStatus.ACTIVE,\n    //         \"Subscription not active\"\n    //     );\n    //     require(sub.morphoShares > 0, \"No staked amount\");\n\n    //     uint256 currentAssets = morphoVault.convertToAssets(sub.morphoShares);\n    //     require(currentAssets > sub.stakedAmount, \"No yield to withdraw\");\n\n    //     uint256 yieldAmount = currentAssets - sub.stakedAmount;\n    //     uint256 burnedShares = morphoVault.withdraw(\n    //         yieldAmount,\n    //         address(this),\n    //         address(this)\n    //     );\n\n    //     paymentToken.safeTransfer(msg.sender, yieldAmount);\n\n    //     // Reduce stored shares to reflect withdrawn yield\n    //     sub.morphoShares -= burnedShares;\n\n    //     emit YieldWithdrawn(msg.sender, planId, yieldAmount);\n    // }\n\n    /**\n     * @dev Business owner can withdraw funds from yearly subscriptions\n     */\n    function businessOwnerWithdraw(\n        uint256 amount\n    ) external onlyOwner nonReentrant {\n        uint256 withdrawableAssets = morphoVault.maxWithdraw(address(this));\n        require(amount <= withdrawableAssets, \"Insufficient vault balance\");\n\n        morphoVault.withdraw(amount, address(this), address(this));\n\n        if (amount >= totalYearlyDeposits) {\n            totalYearlyDeposits = 0;\n        } else {\n            totalYearlyDeposits -= amount;\n        }\n\n        paymentToken.safeTransfer(owner(), amount);\n\n        emit BusinessOwnerWithdrawal(amount, totalYearlyDeposits);\n    }\n\n    /**\n     * @dev Get subscription details for a user and plan\n     */\n    function getSubscription(\n        address user,\n        uint256 planId\n    ) external view returns (Subscription memory) {\n        return subscriptions[user][planId];\n    }\n\n    /**\n     * @dev Get user's active subscriptions\n     */\n    function getUserActiveSubscriptions(\n        address user\n    ) external view returns (uint256[] memory) {\n        return userActiveSubscriptions[user];\n    }\n\n    /**\n     * @dev Check if subscription is expired and update status\n     */\n    function checkAndUpdateExpiration(address user, uint256 planId) external {\n        Subscription storage sub = subscriptions[user][planId];\n        if (\n            sub.status == SubscriptionStatus.ACTIVE &&\n            block.timestamp > sub.expirationTime\n        ) {\n            sub.status = SubscriptionStatus.EXPIRED;\n            _removeFromActiveSubscriptions(user, planId);\n        }\n    }\n\n    /**\n     * @dev Set backend address\n     */\n    function setBackend(address _backend) external onlyOwner {\n        backend = _backend;\n    }\n\n    /**\n     * @dev Toggle subscription plan active status\n     */\n    function togglePlanStatus(uint256 planId) external onlyOwner {\n        subscriptionPlans[planId].isActive = !subscriptionPlans[planId]\n            .isActive;\n    }\n\n    /**\n     * @dev Emergency pause/unpause\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Internal function to remove plan from user's active subscriptions\n     */\n    function _removeFromActiveSubscriptions(\n        address user,\n        uint256 planId\n    ) internal {\n        uint256[] storage activeSubs = userActiveSubscriptions[user];\n        for (uint256 i = 0; i < activeSubs.length; i++) {\n            if (activeSubs[i] == planId) {\n                activeSubs[i] = activeSubs[activeSubs.length - 1];\n                activeSubs.pop();\n                break;\n            }\n        }\n    }\n\n    // No native token support\n}\n"
      },
      "project/lib/metamorpho/src/interfaces/IMetaMorpho.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title IMetaMorpho\n * @notice Interface for MetaMorpho vault (ERC4626-based)\n * @dev Simplified interface containing only the functions used by SubscriptionManager\n */\ninterface IMetaMorpho {\n    /**\n     * @notice Returns the address of the underlying asset\n     * @return The address of the underlying ERC20 token\n     */\n    function asset() external view returns (address);\n\n    /**\n     * @notice Deposits assets into the vault\n     * @param assets The amount of assets to deposit\n     * @param receiver The address that will receive the shares\n     * @return shares The amount of shares minted\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @notice Withdraws assets from the vault\n     * @param assets The amount of assets to withdraw\n     * @param receiver The address that will receive the assets\n     * @param owner The address that owns the shares\n     * @return shares The amount of shares burned\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    /**\n     * @notice Redeems shares for assets\n     * @param shares The amount of shares to redeem\n     * @param receiver The address that will receive the assets\n     * @param owner The address that owns the shares\n     * @return assets The amount of assets withdrawn\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n\n    /**\n     * @notice Converts shares to assets\n     * @param shares The amount of shares\n     * @return assets The equivalent amount of assets\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @notice Returns the maximum amount of assets that can be withdrawn\n     * @param owner The address to check\n     * @return maxAssets The maximum withdrawable assets\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n}\n\n"
      }
    }
  }
}
